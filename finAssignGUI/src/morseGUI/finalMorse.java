package morseGUI;

/**
 * @author Darren Morkel, November 2021
 */
import javax.swing.UIManager;
import java.io.File;
import java.io.FileReader;
import java.io.BufferedReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import javax.swing.JOptionPane;
import javax.swing.JFileChooser;

/**
 * Runs the encoder and decoder GUI program.
 */
public class finalMorse extends javax.swing.JFrame {

    /**
     * instantiates the variables needed to allow proper functioning of the
     * Morse code GUI
     */
    private StringBuffer sb;
    private File file;
    private FileReader fr;
    private BufferedReader br;
    private FileWriter fw;
    private PrintWriter pw;
    private final JFileChooser jfc;

    /**
     * Creates new form finalMorse and assigns a value to the JFileChooser
     */
    public finalMorse() {
        jfc = new JFileChooser();
        jfc.setCurrentDirectory(new File("\\"));
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        encodeButton = new javax.swing.JButton();
        decodeButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openFile = new javax.swing.JMenuItem();
        saveFile = new javax.swing.JMenuItem();
        exitFile = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Morse Code GUI");
        setLocation(new java.awt.Point(600, 250));

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        encodeButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        encodeButton.setText("Encode");
        encodeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encodeButtonActionPerformed(evt);
            }
        });

        decodeButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        decodeButton.setText("Decode");
        decodeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decodeButtonActionPerformed(evt);
            }
        });

        clearButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        clearButton.setText("Clear Text");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        exitButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        fileMenu.setText("File");

        openFile.setText("Open File...");
        openFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileActionPerformed(evt);
            }
        });
        fileMenu.add(openFile);

        saveFile.setText("Save File...");
        saveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileActionPerformed(evt);
            }
        });
        fileMenu.add(saveFile);

        exitFile.setText("Exit");
        exitFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitFileActionPerformed(evt);
            }
        });
        fileMenu.add(exitFile);

        jMenuBar1.add(fileMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(encodeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(decodeButton)
                        .addGap(18, 18, 18)
                        .addComponent(clearButton)
                        .addGap(119, 119, 119)
                        .addComponent(exitButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exitButton)
                    .addComponent(clearButton)
                    .addComponent(decodeButton)
                    .addComponent(encodeButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Clears the text within the JFrame text area
     */
    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        jTextArea1.setText("");
    }//GEN-LAST:event_clearButtonActionPerformed

    /**
     * Closes and ends the running of the JFrame application
     */
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    /**
     * Closes and ends the running of the JFrame application.
     */
    private void exitFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitFileActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitFileActionPerformed

    /**
     * Runs when then user wants to open a file from their local directory
     */
    private void openFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileActionPerformed
        int returnVal = jfc.showOpenDialog(openFile);//Opens the "Open File" Window
        StringBuffer sb = new StringBuffer();//Creates a modifiable String object "sb"
        try {
            if (returnVal == 0) {
                jTextArea1.setText("");
                file = jfc.getSelectedFile();//Retrieves the file selected by the user
                fr = new FileReader(file);//Reads the data from the selected file
                br = new BufferedReader(fr);//Buffers characters to provide for reading of chars, lines and arrays
                String line;
                while ((line = br.readLine()) != null) {
                    sb.append(line);//Appends the "line" String to the StringBuffer
                    sb.append('\n');
                }
                jTextArea1.setText(sb.toString());//Sets the jtextArea to the appended StringBuffer
                fr.close();
                br.close();
                jTextArea1.setCaretPosition(0); //Places the Caret at the beginning of the textarea.
            } else if (returnVal == 1) {

            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, e //if caught, this error message will be displayed.
                    .getMessage(), "ERROR!", 0);
        }
    }//GEN-LAST:event_openFileActionPerformed
    /**
     * This button takes the text generated in the text area and encodes the
     * letters into corresponding morse code by using the encode Helper class.
     */
    private void encodeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encodeButtonActionPerformed
        String enc = jTextArea1.getText().toUpperCase(); //gets the text from the textarea, converts it to uppercase.
        jTextArea1.setText(MorseHelper.encode(enc)); //sets the text to morse code.
    }//GEN-LAST:event_encodeButtonActionPerformed
    /**
     * This button saves the text as a new file by bringing up a save dialog
     * window and prints the formatted representation of objects to the
     * text-output stream.
     */
    private void saveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileActionPerformed
        String fileText = jTextArea1.getText();
        try {
            int returnVal = jfc.showSaveDialog(jMenuBar1);
            if (returnVal == 0) {
                fw = new FileWriter(jfc.getSelectedFile()); //FileWriter gets the selected file from the user's input and writes the stream of chars to the file.
                pw = new PrintWriter(fw); //PrintWriter uses the FileWriter as its argument.
                pw.print(fileText);
                fw.close();
                pw.close();
            } else if (returnVal == 1) {

            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, e //if caught, this error message will be displayed.
                    .getMessage(), "ERROR!", 0);
        }
    }//GEN-LAST:event_saveFileActionPerformed
    /**
     * This button is used to decode the Morse code by getting the text from
     * jTextArea and sets the text using the decode method from the Helper
     * class.
     */
    private void decodeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decodeButtonActionPerformed
        String dec = jTextArea1.getText();
        jTextArea1.setText(MorseHelper.decode(dec));
    }//GEN-LAST:event_decodeButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        try {

            UIManager.setLookAndFeel(
                    UIManager.getSystemLookAndFeelClassName()
            );

        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(finalMorse.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(finalMorse.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(finalMorse.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(finalMorse.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new finalMorse().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearButton;
    private javax.swing.JButton decodeButton;
    private javax.swing.JButton encodeButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JMenuItem exitFile;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JMenuItem openFile;
    private javax.swing.JMenuItem saveFile;
    // End of variables declaration//GEN-END:variables
}
